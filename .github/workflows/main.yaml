name: CI/CD Workflow

on:
  push:
    branches:
      - release


permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Build
        run: npm run build --if-present

      - name: Run Tests with Coverage
        run: |
          npm install --save-dev jest
          npx jest --coverage 
        env:
          CI: true

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=J-hu960_autoversion-node \
            -Dsonar.organization=mysecretsonarkey \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true \
        env:
          SONARCLOUD_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: static-code-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run Semantic Release 2
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Release Tag
        run: echo "new_release=$(npx semantic-release --dry-run | grep 'Release version' | awk '{print $NF}')" >> $GITHUB_ENV
  deploy:
    name: Build and Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: release
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
           credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
           project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Build Docker Image
        run: |
            gcloud builds submit \
            --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/autoversion-node:${{ env.new_release }}
      
      - name: Deploy to Google Cloud Run
        run: |
           gcloud run deploy autoversion-node \
           --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/autoversion-node:${{ env.new_release }} \
           --platform managed \
           --region ${{ secrets.GCP_REGION }} \
           --allow-unauthenticated