name: CI/CD Workflow

on:
  push:
    branches:
      - release


permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Build
        run: npm run build --if-present

      - name: Run Tests with Coverage
        run: |
          npm install --save-dev jest
          npx jest --coverage 
        env:
          CI: true

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner -X \
            -Dsonar.projectKey=J-hu960_autoversion-node \
            -Dsonar.organization=mysecretsonarkey \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true \


  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: static-code-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run Semantic Release 2
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Release Tag
        run: echo "new_release=$(npx semantic-release --dry-run | grep 'Release version' | awk '{print $NF}')" >> $GITHUB_ENV
  deploy:
    runs-on: 'ubuntu-latest'
 

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Checkout the code
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'

      # Authenticate to Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/525373923741/locations/global/workloadIdentityPools/github-workload/providers/github-actions'
          service_account: 'mia-sandboxv1@ytt-mia.iam.gserviceaccount.com'

      - name: 'Configure Docker for Artifact Registry'
        run: |
          gcloud auth configure-docker ${{secrets.GCP_REGION}}-docker.pkg.dev

      - name: 'Build and Push cocohomes Backend Image'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: '${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/${{ secrets.GPC_SERVICE }}:${{ github.sha }}'

      # Deploy to Cloud Run
      - name: 'Deploy Backend to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ secrets.GPC_SERVICE }}'
          region: '${{ secrets.GCP_REGION }}'
          image: '${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/${{ secrets.GPC_SERVICE }}:${{ github.sha }}'
          env_vars: |
            ENVIRONMENT=pro
